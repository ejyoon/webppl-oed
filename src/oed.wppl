var pam = function(arr,f) {
    return map(f,arr)
};

var score = function(erp, x) {
    // for backwards compatibility with webppl < 0.7
    //return Math.max(erp.score(null, x), erp.score(x));
    // NB: ^ isn't bullet proof
    erp.score(x)
}

var exp = function(x) {
    return Math.exp(x);
}

var expectation = function(erp) {
    sum(map(function(state) { return exp(score(erp, state)) * state },
            erp.support()))
}

var variance = function(erp) {
    var mean = expectation(erp)

    sum(map(function(state) { return exp(score(erp, state)) * (state - mean)*(state-mean) },
            erp.support()))
}

var KL = function(P, Q) {
    var statesP = P.support();
    var statesQ = Q.support();

    // TODO: assert that states1 = states2
    return sum(map(
        function(state) {
            var scoreP = score(P, state), scoreQ = score(Q, state);
            var probP = exp(scoreP);
            // P(i) * log[ P(i) / Q(i) ] =  P(i) * [log(P(i) - log(Q(i)))]
            return probP * (scoreP - scoreQ);
        },
        statesP));
}

// compute actual information gain
var AIG = function(mSample, x, y) {
    var mPrior = Enumerate(function() { return mSample().name });

    var mPosterior = Enumerate(function() {
        var m = mSample();
        var mx = m(x);
        var LL = sum(map(function(yi) {return score(mx, yi)}, y));
        factor(LL);
        return m.name;
    })

    return KL(mPosterior, mPrior);
}


// notes: doesn't seem to work with incrementalMH right now
var EIG = function(args) {
    var mSample = args.mSample, xSample = args.xSample, ySample = args.ySample,
        mNameSample = args.mNameSample;
    // example: could use MH for M1 but then enumerate for M2
    var infer = args.infer || {},
        inferX = infer.X || Enumerate,
        inferY = infer.Y || Enumerate,
        inferM1 = infer.M1 || Enumerate,
        inferM2 = infer.M2 || Enumerate,
        mFuncs = args.mFuncs;

    var mPrior = inferM1(function() {
        return mNameSample()
    });

    inferX(function() {
        var x = xSample();
        // wrt the above distribution on responses, what is the posterior distribution on models?
        var KLDist = inferY(function() {
            var mName = mNameSample(), m = mFuncs[mName];
            var y = ySample();
            var scoreY = m(x,y);
            factor(scoreY);

            var mPosterior = inferM2(function() {
                var m2Name = mNameSample(), m2 = mFuncs[m2Name];
                var ll = m2(x,y);
                factor(ll);
                return m2Name
            });
            var kl = KL(mPosterior, mPrior);
            return kl;
        });

        // is there a way of getting confidence intervals around eig?
        var EIG = expectation(KLDist);
        factor(EIG);
        // var VIG = variance(KLDist);
        // return {x: x, EIG: EIG, VIG: VIG}
        return {x: x, EIG: EIG}
    })
}

var OED = EIG;
