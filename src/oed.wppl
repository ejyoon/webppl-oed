var pam = function(arr,f) {
    return map(f,arr)
};

var score = function(erp, x) {
    // for backwards compatibility with webppl < 0.7
    return Math.max(erp.score(null, x), erp.score(x));
}

var exp = function(x) {
    return Math.exp(x);
}

var expectation = function(erp) {
    sum(map(function(state) { return exp(score(erp, state)) * state },
            erp.support()))
}

var KL = function(P, Q) {
    var statesP = P.support();
    var statesQ = Q.support();

    // TODO: assert that states1 = states2
    return sum(map(
        function(state) {
            var scoreP = score(P, state), scoreQ = score(Q, state);
            var probP = exp(scoreP);
            // P(i) * log[ P(i) / Q(i) ] =  P(i) * [log(P(i) - log(Q(i)))]
            return probP * (scoreP - scoreQ);
        },
        statesP));
}

// compute actual information gain
var AIG = function(mSample, x, y) {
    var mPrior = Enumerate(function() { return mSample().name });

    var mPosterior = Enumerate(function() {
        var m = mSample();
        var mx = m(x);
        var LL = sum(map(function(yi) {return score(mx, yi)}, y));
        factor(LL);
        return m.name;
    })

    return KL(mPosterior, mPrior);
}


var EIG = function(args, _infer) {
    var mSample = args.mSample, xSample = args.xSample;
    // example: could use MH for M1 but then enumerate for M2
    var infer = _infer || {},
        inferX = infer.X || Enumerate,
        inferY1 = infer.Y1 || Enumerate,
        inferY2 = infer.Y2 || Enumerate,
        inferM1 = infer.M1 || Enumerate,
        inferM2 = infer.M2 || Enumerate;

    var mPrior = inferM1(function() {
        var m = mSample();
        // if we just return the function, webppl returns a support with only
        // one element because it has trouble comparing functions, so
        // return this object instead
        // (see https://github.com/probmods/webppl/issues/422)
        return {
            name: m.name,
            func: m
        }
    });

    inferX(function() {
        var x = xSample();

        // wrt the prior on models, how likely is each response?
        var yLikelihood = inferY1(function() {
            var m = sample(mPrior);
            var f = m.func;
            var mx = f(x);
            var y = sample(mx);
            return y;
        });

        // wrt the above distribution on responses, what is the posterior distribution on models?
        var KLDist = inferY2(function() {
            var y = sample(yLikelihood);
            var mPosterior = inferM2(function() {
                var m = sample(mPrior);
                var f = m.func;
                var mx = f(x);
                factor(score(mx, y))
                return m;
            })

            return KL(mPosterior, mPrior);
        });
        var eig = expectation(KLDist);
        factor(eig); // can we convert kl to a probability somehow? e.g., probability of observing the posterior distribution given the prior? is this useful?
        return {x: x, EIG: eig}
    })
}

var OED = EIG;
