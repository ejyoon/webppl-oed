// ;-- load libraries
// (load "lib.church") 

// ;-- inputs
// (define input_list (regexp-split argstring "|"))
// (define i_cat_a    (map (lambda (x) (map (lambda (y) (string_to_number y)) 
//                                          (regexp-split x ",")))
//                         (regexp-split (first input_list) ";")))
// (define i_cat_b    (map (lambda (x) (map (lambda (y) (string_to_number y)) 
//                                          (regexp-split x ",")))
//                         (regexp-split (second input_list) ";")))
// (define i_t_stim   (map (lambda (x) (map (lambda (y) (string_to_number y)) 
//                                          (regexp-split x ",")))
//                         (regexp-split (third input_list) ";")))

// (define categorization
//     (mem (lambda (stimulus cat_a cat_b w)
//         (define (evi_s s1 s2 w) (apply * (map (lambda (x y z) 
//                                                       (if (eq? x y) 1 z)) 
//                                               s1 s2 w)))

//         (define p_evi_a (sum (map (lambda (a) (evi_s stimulus a w)) cat_a)))
//         (define p_evi_b (sum (map (lambda (b) (evi_s stimulus b w)) cat_b)))

//         (list (list 0 1)
//               (list (/ p_evi_a (+ p_evi_a p_evi_b))
//                     (/ p_evi_b (+ p_evi_a p_evi_b)))))))


var evidence_s = function(s1, s2, 2) {
	return product(map2(function(xs,z){
		xs[0]==xs[1] ? 1 : z
	}, zip(s1,s2),w]))
}

var categorization = function(stimulus, category_a, category_b, w){
	var p_evi_a = sum(map(function(a){return evidence_s(stimulus, a, w)}, category_a))
	var p_evi_b = sum(map(function(b){return evidence_s(stimulus, b, w)}, category_b))
	return [[0,1], normalize(p_evi_a, p_evi_b)]
}

// (define sample_w (repeat samples (lambda () (repeat 4 (lambda() (uniform 0 1))))))

// (define (stim_dist w)
//     (map (lambda (x) (first (second (categorization x i_cat_a i_cat_b w))))
//          (append i_cat_a i_cat_b i_t_stim)))

// (define cat_dist (map stim_dist sample_w))

// (define mean_cat_dist (v_div (fold v_add 
//                              (first cat_dist) (rest cat_dist)) 
//                       (length cat_dist)))

// mean_cat_dist


var sample_w = repeat(samples, function(){return repeat(4, function(){return uniform(0,1)})})
var stim_dist = function(w) {
	map(function(x){	
		return first(second(categorization(x, i_cat_a, i_cat_b, w)))
	}, append(append(i_cat_a, i_cat_b), i_t_stim))
}

var cat_dist = map(stim_dist, sample_w)
var mean_cat_dist = ...


// (define mean_cat_dist (v_div (fold v_add 
//                              (first cat_dist) (rest cat_dist)) 
//                       (length cat_dist)))

// mean_cat_dist
